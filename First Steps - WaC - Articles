
*Dec 20. <-- Articles will be renamed into WaC "Writing Along the Curriculum"
*Dec 23. <-- Due to the free time we are reading all lessons again, and rewriting all 
articles.

1) - https://guides.github.com/activities/hello-world/

First guide on git. The very manual, learned to created repositories, pull, merge and edit changes.
I can call it the very basic training of git, the barebones. More than 10 minutes needles to say. 
I took my time and ended up in half an hour's worth of course. That's me i guess. Also to note that 
the guide is based on website control, no command line support. Also the first Article. Well.

2) - https://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide

Second guide, a google result, it turned out to be practical as advertised. But the order is a bit
weird, i went from configurating the git to searching terms i had no clue what they were. Well all
in all it is rich and content friendly. It is not for me at this point, so i will keep it around as
a reference and for random questions. Well as of now, i have visited this guide many times, i have 
add that it helped me a great many times. Not only the guide itself, but also the comments, you can
find a great deal of resources, answering some inquisitive minds.

3) - https://guide.freecodecamp.org/git

Now this is what i call entry level, the most usefull guide so far. I can feel entry level now, we 
got some basic concepts and 101s. Git is a distributed control system that helps multiple users or
coders, have access to a file or program (hosted online on repositories) and modify it. Plain? Simple?
Yes but no so much. What really shines is in the inner workings, and in this git-case, the impecable
history, comparison to the master. Imagine 100 people proof reading the same page on the excact same
time, on diffrent places. After they are done they sent the pages to the author to review and accept
or refuse the changes. This is git, takes all pages, compares the changes, checks the reasons for the
changes, merges the changes with the orignal page, and voilla 1 page merged with 100+ corrections.
Ending in a clandestine document passed by 100 set of eyes, and also a history behind it, all the 
changes that it went from the orignal state, along with the reasons for the edit, the date/hour and
the author of the changes. All that in real time, connecting literally all of the world.
Clone - Modify - Stage - commit - push.

4) - https://code.visualstudio.com/docs/editor/versioncontrol

How i learned to configure git and use it from within  my computer and to edit files with VsCode.

5) - https://www.freecodecamp.org/news/the-beginners-guide-to-git-github/

Well, useful but cant follow it via order. Around half of the guide tells you to add a sample.html 
via commands, you also need to create it in the local area, were you have cloned the repository.
At this point i got stuck, began reading other material, even asked in stackoverflow, 
eventually, the solution was found and i was able to continue reading this guide.
Good one... but...nonetheless, good one.

6) - https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-
positively-must-know-about-unicode-and-character-sets-no-excuses/

I dont know if there is a bare minimum in anything, and i dont know what the heck encodings is.
That changed after the article. Well it is a bit tech savvy, with all the byte theory behind it.
But it makes sense, i understood what encoding is, how, when and where it is used, got some references
for encodings, highly useful to have around. The most important i found out, was the the know how
to fix a page that has encoding problems, common problems, the reason behind it (Yeap, you guessed it - bytes)
and how to specify encodings in the page. In code, that's right.
Bare minimums Achieved.

7) - https://www.w3.org/International/questions/qa-what-is-encoding
8) - https://www.w3.org/International/getting-started/characters
9) - https://www.w3.org/International/tutorials/tutorial-char-enc/

W3.org, quality site, the tutorials are well written, the ones i used anyway... Needless to say, one link
led to another, and maybe there are four tutorials. Anyway, those got a bit techie, but all in all, they 
cover fonts, repertoirs, sets, application in CSS and HTML, escapes, ASCII, BOM Byte Order Mark. Nice more on
encodings later.

10)- Creative Writing by Margaret Atwood.

Now that was a course i enjoyed not alone. Around 4 hours. Covers the aspects of how to write, the
perspectives of the story, not so basic, i will review it again and try to understand it a bit better.

11) - What you need before you start Programming.

Not much, mostly a motivational video, i watched it with the seek bar on the move. Anyway key points, 
learned how to create a system of learning, how to tell between what i need to learn and what i want 
to learn. Well it helped at least. I thought it was about the tools and the environment you need before the 
actual thing.

12) - https://lab.github.com/githubtraining/introduction-to-github

Well a tutorial on git, and not only, many languages. Finished the first day, learned about collaborating
issue fixing and taking over, sorry my mind stopped. on todo.

a) - https://ohshitgit.com
Honorable mention













`